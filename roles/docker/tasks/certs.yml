---

# Generate TLS keys and certificates
# (Based on https://docs.docker.com/engine/security/protect-access/#use-tls-https-to-protect-the-docker-daemon-socket)

- name: Ensure pip is installed  # pip is required to install `cryptography` (community.crypto dependency)
  ansible.builtin.apt:
    name: python3-pip
    state: present
    update_cache: yes

- name: Ensure cryptography is installed  # community.crypto collection dependency
  ansible.builtin.pip:
    name: cryptography
    state: "{{ 'latest' if (upgrade or tls_renew_certs) else 'present' }}"

- name: Ensure Docker TLS certificate directory exists
  ansible.builtin.file:
    path: "{{ tls_cert_path }}"
    state: directory

# Conditions for recreating the CA, server, and client certificates vary. Basically, while it would be easier
# to always recreate all three if anything changes, this approach allows us to recreate only the server cert
# if the list of SANs is changed, without invalidating existing client certificates. We test for these conditions
# via separate tasks rather than using the community.crypto.x509_certificate module declaratively, since its
# relative expiration time field prevents idempotent usage.

# Recreate the CA certificate if:
# - It doesn't exist
# - Its private key doesn't exist (as we might need it to recreate the server or client certs)
# - It has expired, and the variable tls_renew_certs is true

- name: Check whether CA cert exists
  ansible.builtin.stat:
    path: "{{ ca_cert_path }}"
  register: ca_cert

- name: Check whether CA private key exists
  ansible.builtin.stat:
    path: "{{ ca_key_path }}"
  register: ca_key

- name: Get CA certificate info
  community.crypto.x509_certificate_info:
    path: "{{ ca_cert_path }}"
    valid_at:
      now: "+0s"
  register: ca_cert_info
  when: ca_cert.stat.exists

- name: Determine whether to recreate CA cert
  ansible.builtin.set_fact:
    recreate_ca_cert: "{{ not ca_cert.stat.exists or not ca_key.stat.exists or (not ca_cert_info is skipped and tls_renew_certs and not ca_cert_info.valid_at['now']) }}"

- name: Recreate private key for CA
  community.crypto.openssl_privatekey:
    path: "{{ ca_key_path }}"
    type: RSA
    size: 4096
    mode: 0400
    force: yes
  when: recreate_ca_cert

- name: Recreate CSR for CA cert
  community.crypto.openssl_csr:
    path: "{{ ca_csr_path }}"
    privatekey_path: "{{ ca_key_path }}"
    common_name: "Local Docker CA"
    basic_constraints: "CA:TRUE"
    basic_constraints_critical: yes
    key_usage:
      - keyCertSign
      - cRLSign
      - digitalSignature
    force: yes
  when: recreate_ca_cert

- name: Recreate CA cert
  community.crypto.x509_certificate:
    path: "{{ ca_cert_path }}"
    privatekey_path: "{{ ca_key_path }}"
    csr_path: "{{ ca_csr_path }}"
    provider: selfsigned
    selfsigned_not_after: "+{{ tls_expiration_days }}d"
    mode: 0444
    force: yes
  when: recreate_ca_cert
  notify:
    - Restart Docker

# Recreate the server certificate if:
# - It doesn't exist
# - The CA cert was recreated
# - The list of SANs has changed

- name: Check whether server cert exists
  ansible.builtin.stat:
    path: "{{ server_cert_path }}"
  register: server_cert

- name: Get server certificate info
  community.crypto.x509_certificate_info:
    path: "{{ server_cert_path }}"
  register: server_cert_info
  when: server_cert.stat.exists

- name: Determine whether to recreate server cert
  ansible.builtin.set_fact:
    recreate_server_cert: "{{ not server_cert.stat.exists or recreate_ca_cert or (not server_cert_info is skipped and server_cert_info.subject_alt_name != tls_SANs) }}"

- name: Recreate private key for server
  community.crypto.openssl_privatekey:
    path: "{{ server_key_path }}"
    type: RSA
    size: 4096
    mode: 0400
    force: yes
  when: recreate_server_cert

- name: Recreate CSR for server
  community.crypto.openssl_csr:
    path: "{{ server_csr_path }}"
    privatekey_path: "{{ server_key_path }}"
    common_name: "localhost"
    subject_alt_name: "{{ tls_SANs }}"
    extended_key_usage:
      - serverAuth
    force: yes
  when: recreate_server_cert

- name: Recreate server cert
  community.crypto.x509_certificate:
    path: "{{ server_cert_path }}"
    privatekey_path: "{{ server_key_path }}"
    csr_path: "{{ server_csr_path }}"
    provider: ownca
    ownca_path: "{{ ca_cert_path }}"
    ownca_privatekey_path: "{{ ca_key_path }}"
    ownca_not_after: "+{{ tls_expiration_days }}d"
    mode: 0444
    force: yes
  when: recreate_server_cert

# Recreate the client certificate if:
# - It doesn't exist
# - The CA cert was recreated

- name: Check whether client cert exists
  ansible.builtin.stat:
    path: "{{ client_cert_path }}"
  register: client_cert

- name: Determine whether to recreate client cert
  ansible.builtin.set_fact:
    recreate_client_cert: "{{ not client_cert.stat.exists or recreate_ca_cert }}"

- name: Recreate private key for client
  community.crypto.openssl_privatekey:
    path: "{{ client_key_path }}"
    type: RSA
    size: 4096
    mode: 0400
    force: yes
  when: recreate_client_cert

- name: Recreate CSR for client
  community.crypto.openssl_csr:
    path: "{{ client_csr_path }}"
    privatekey_path: "{{ client_key_path }}"
    common_name: "client"
    extended_key_usage:
      - serverAuth
    force: yes
  when: recreate_client_cert

- name: Recreate client cert
  community.crypto.x509_certificate:
    path: "{{ client_cert_path }}"
    privatekey_path: "{{ client_key_path }}"
    csr_path: "{{ client_csr_path }}"
    provider: ownca
    ownca_path: "{{ ca_cert_path }}"
    ownca_privatekey_path: "{{ ca_key_path }}"
    ownca_not_after: "+{{ tls_expiration_days }}d"
    mode: 0444
    force: yes
  when: recreate_client_cert

- name: Fetch client certs to host
  ansible.builtin.fetch:
    dest: "{{ tls_fetched_cert_path }}/{{ inventory_hostname }}/"
    flat: yes
    src: "{{ item }}"
  with_items:
    - "{{ ca_cert_path }}"
    - "{{ client_cert_path }}"
    - "{{ client_key_path }}"
  when: tls_fetch_certs
